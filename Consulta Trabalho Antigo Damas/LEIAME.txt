Damas
=====

Jogo de damas desenvolvido para a disciplina Programação Modular da PUC-RIO.

Desenvolvido por:

- Henrique Santiago
- Marcelo Resende
- Rafael Haeusler


Prof. Alessandro Garcia, e-mail: afgarcia@inf.puc-rio.br

Assistente Danyllo Albuquerque, e-mail: dwalbuquerque@inf.puc-rio.br

Assistente Willian Oizumi, e-mail: woizumi@inf.puc-rio.br

Assistente Luciano Sampaio, e-mail: lsampaio@inf.puc-rio.br

Apresentação
===============================================================================
Esse texto descreve o conteúdo do arquivo INF1301-Trab2-HSMRRH.zip, que contém 
os arquivos necessários para a implementação e teste dos módulos lista, peça e 
tabuleiro de um jogo de damas. Também possui o programa DAMAS.exe compilável e scripts para testar vazamento de memória e assertivas estruturais do tabuleiro.



Instalação
===============================================================================
Crie um diretório no qual você deseja instalar o arquivo. Dezipe o arquivo 
INF1301-Trab2-HSMRRH.zip assegurando que sejam gerados os sub-diretórios contidos
no arquivo.zip. Isto criará a estrutura de diretórios utilizada e copiará:

-os códigos fonte dos módulos;
-os códigos fonte das funções de controle de teste específicas de cada módulo; 
-os scripts de teste dos módulos desenvolvidos;
-os arquivos batch (.bat) que auxiliam na compilação e teste dos construtos;
-os scripts de composição (.comp), de make e arquivos script .build para o linker gerados pelo utilitário GMAKE;
-os programas executáveis TesteLista.exe, TestePeca.exe e TesteTabuleiro.exe;
-arquivos .pdf com modelo físico da estrutura completa e a arquitetura do programa;
- O modelo físico da estrutura auto-verificável implementada
-arquivos .txt com os relatórios de cada componente do grupo.
-O arquivo de declaração dos contadores e de totalização dos mesmos.


Estrutura de diretórios
================================================================================
Os seguintes diretórios são gerados ao dezipar:

-Batches: contém arquivos .bat que auxiliam na realização dos testes e na (re)compilação dos construtos.

-Composicao: contém os arquivos .comp com os scripts de composição e .make com os scripts de 
	     make dos módulos. Arquivos do formato .list também aparecerão aqui caso sejam rodados os batches corretos.

-Docs: contém arquivos .pdf e .txt, com os relatórios dos componentes do grupo, modelo físico da estrutura 
	implementada, seu exemplo físico, a arquitetura do programa de damas, sua especificação, o modelo do Lista 	genérica auto-verificável e um arquivo LinguagemTeste.txt contendo a documentação da linguagem script de teste.
	Além deste documento (LEIAME).

-Fontes: contém os arquivos de código fonte (.c e .h) do programa. O arquivo tipos.h possui os
	tipos usados no programa.

-Objetos: contém arquivos script .build para o linker. Arquivos do formato .obj também apa-
          recerão aqui caso sejam rodados os batches corretos.

-Produto: contém os executáveis gerados após a compilação dos módulos. Eles implementam os
	  testes dos módulos e o jogo de damas executável. DAMAS.exe é o jogo de damas sem instrumentação e DAMASDEBUG.exe é o jogo com instrumentação.
	  TESTETABULEIRO.exe é o tete de tabuleiro sem instrumentação e TESTETABULEIRODEBUG.exe, com instrumentação.
	  Os resultados dos testes (arquivos .log e Registro de 	  Contadores) irão aparecer
	  aqui depois que os testes forem rodados. Arquivos com formato .err também deverão 
	  ser gerados aqui se forem executados os batches corretos

-Scripts: contém os scripts de teste (.script) e o arquivo de declaração dos contadores. O arquivo estatisticas (.estat) será gerado
    	  aqui após a execução dos testes, sob certas circunstâncias.


Documentação
=================================================================================
A pasta Docs contém os seguintes documentos:

-modelo_fisico.pdf: contém o modelo físico da estrutura completa (Lista, tabuleiro e peças).

-exemplo_modelo_físico.pdf: contém o exemplo físico da estrutura completa.

-especificacao.pdf: contém a especificação de requisitos do Programa Jogo de Damas

-Arquitetura_damas.pdf: contém a arquitetura do Programa Jogo de Damas

-estruturaVerificável.pdf: contém o modelo do Lista genérica auto-verificável e as
correspondentes assertivas estruturais.

-LinguagemTeste.txt (ou .doc, ou .pdf): contém a documentação da linguagem script de teste.

-LEIAME.txt: o presente documento

-relatorio-nome.txt: o relatório de cada membro do grupo


Execução dos Testes
=================================================================================
Os testes devem ser executados a partir da janela de linha de comando do Windows (CMD).
É provável que seja necessário alterar parâmetros de ambiente requeridos pelo compilador.
O batch vsvars32.bat, disponibilizado pelo visual studio deve ser executado antes de executar
os batches.
Há três formas de executar os testes:

1. Na pasta Produto (onde estão os executáveis), execute o comando:
	TESTE*.exe/S..\scripts\teste*.script /L..\produto\Teste*
   
   TESTE*.exe e teste*.script devem corresponder aos arquivos .exe que se quer testar e seu
   respectivo script de teste, existente na pasta script.

   Se for passado o parâmetro /L, será gerado um arquivo .log com o resultado dos testes.
   Caso contrário, o resultado só será exibido na tela. 
   
   EXEMPLOS: TESTEPECA.exe/s..\scripts\testepeca
	    TESTELISTA.exe/s..\scripts\testelista /l..\produto\TesteLista
2. Execute o batch Testa.bat da pasta batches. Ele executará o teste de um dos módulos a
   partir de seu script. Para isso, deve-se usar a seguinte sintaxe: 
	
	Testa.bat  <NomePrograma> <NomeScript> [l].
   
   Exemplo: Testa.bat TESTEPECA testepeca
   	     
   Se for passado [l], será gerado o arquivo .log do arquivo testado, na pasta Produtos.

3. Execute o batch TestaTudo.bat da pasta batches. Ele executará os testes dos módulos lista, peca 
   e tabuleiro a partir dos scripts testelista.script, testepeca.script, testetebuleiro.script, testetebuleiroSemDeturpacoes e testetebuleiroVerificacao,
   respectivamente. Também irá gerar:

   - os relatórios dos testes (.log) respectivos: TESTELISTA.log, TESTEPECA.log e TESTETABULEIRO.log, 
     TESTETEBULEIRODEBUG.log,TesteTabuleiroSemDeturpacoes.log e TesteTabuleiroComDeturpacoes.log, além 
     dos arquivo de totalização dos contadores.Esses arquivos são gerados na pasta Produto;
   - o arquivo estatisticas.estat na pasta Scripts, se o executável exbestat existir e estiver na 
     pasta correta (Veja seção seguinte: compilação através dos batches);


(Re)compilação através dos batches
==================================================================================
A pasta batches possui diversos batches que auxiliam na (re)compilação e utilização
do arquivo. Ao (re)compilar o programa usando os batches, é necessário usar certos 
arquivos fornecidos pelo Arcabouço de Apoio ao Teste Automatizado para Programas Re-
digidos em C (Autotest). Os passos a seguir elucidam esse processo:

-Na pasta Objetos, coloque a biblioteca do arcabouço: ArcaboucoTeste.lib

-Na pasta Fontes, coloque os arquivos header(.h): TST_ESPC.h, LERPARM.h, GENERICO.h, Cespdin.h
e Conta.h. 

-Na pasta Composicao, coloque o arquivo Gmake.parm

-Crie no diretório uma pasta de nome "ferramnt" (tudo minúsculo) e nela coloque os 
 executáveis Gmake.exe, Compilebanner.exe e exbestat.exe

Há um batch VerificaAlocacao que verifica se esse processo foi feito da forma correta 
(Ver adiante).Cabe observar novamente que pode ser necessário executar o batch vsvars32.bat
do Visual Studio para rodar os batches. Os batches disponibilizados são os seguintes:


-Compila.bat: 	Compila um programa em C a partir de scripts de make. Deve-se usar a
             	sintaxe: Compila.bat <Nome do arquivo>.make (Exemplo: Compila.bat TESTEPECA).
		Gerará na pasta Produto o arquivo .err com o resultado da compilação e o
		arquivo executável que implementa o respectivo teste. Na pasta Objetos, 
		gera os arquivos .obj correspondentes.

-CompilaTudo.bat: Compila todos os testes, de lista, peca e tabuleiro, além dos testes para tabuleiro
		  instrumentado (TabuleiroDEBUG). Usa os respectivos arquivos make. Gera os error log (
		  .err): TESTELISTA.err, TESTEPECA.err e TESTETABULEIRO.err, além de tudo.err, que 
		  mostra o resultado da compilação de todos os construtos na pasta Produto. Gera também
		  os arquivos
 
-GeraMake.bat: 	Gera os scripts de make a partir dos arquivos de composição dos construtos
             	(.comp). Supõe a existência de uma pasta "ferramnt", com o utilitário Gmake.
               	Deve ser ativado a partir da sintaxe: GeraMake.bat <NomeArquivoComposicao> 
               	Exemplo: GeraMake.bat ..\Composicao\TESTEPECA.
	       	Gera, na pasta Composicao, os respectivos arquivos (.list) e (.make), além
		do arquivo (.build) na pasta Objetos

-GeraTudo.bat: 	Gera script de make de todos os módulos: lista, peca e tabuleiro. Usa os res-
               	pectivos arquivos .comp.

-Limpa.bat: 	Limpa os arquivos gerados após a compilação e/ou teste de módulos. Se houver
		a pasta "ferramnt", limpa todos os arquivos que podem ser gerados através da
		compilação/teste dos módulos. Nesse caso, após a execução a pasta Objetos 
		deverá conter apenas ArcaboucoTeste.lib; a pasta Produto deverá estar vazia;
		a pasta Composicao deverá conter apenas os arquivos .comp e Gmake.parm e
		a pasta Scripts não deverá conter arquivos .estat.
		Caso não haja a pasta "ferramnt", o batch elimina apenas os arquivos .log que
		tenham sido gerado nos testes, mantendo os executaveis.

-Testa.bat:	Funciona como especificado em "Execução dos testes". 

-TestaTudo.bat: Funciona como especificado em "Execução dos testes". Caso a pasta "ferramnt"
		exista e tenha sido corretamente criada, deverá criar um arquivo .estat na pas-
		ta Scripts.

-Tudo.bat: 	Se a pasta "ferramnt" existir executa, em ordem: LimpaTudo.bat, GeraTudo.bat, 
		Compilatudo.bat e TestaTudo.bat. Caso contrário executa apenas LimpaTudo.bat 
		e TestaTudo.bat.
		Em outras palavras, ele compila e testa os construtos, caso exista "ferramt"
		ou apenas testa eles caso não exista.

-VerificaAlocacao.bat: Verifica se os arquivos necessarios para compilação dos construtos foram
		       alocados corretamente. Exibe na tela os arquivos que tiverem faltando. Se
		       não estiver faltando nenhum arquivo, nada será exibido na tela e a alocação
		       terá sido feita de forma correta.

Assim para recompilar um construto, pode-se usar um dos batches para geração de scripts de make,
seguido de um dos batches para compilação. Em seguida,testam-se os módulos. Em substituição, pode-se
usar o batch Tudo.bat